/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteName?: string;
  homePage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  navigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
  footerNavigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  status?: "draft" | "published";
  excerpt?: string;
  heroBanner?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "heroBanner";
  }>;
  content?: BlockContent;
  seo?: {
    title?: string;
    description?: string;
    noIndex?: boolean;
  };
};

export type Locale = {
  _id: string;
  _type: "locale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  id?: string;
  isDefault?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  categoryId?: string;
  slug?: Slug;
  heroBanner?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "heroBanner";
  };
  body?: BlockContent;
  publishedAt?: string;
};

export type HeroBanner = {
  _id: string;
  _type: "heroBanner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  landscapeImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  portraitImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  overlay?: {
    headline?: string;
    subheadline?: string;
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h2" | "h3";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    textPosition?: "left" | "center" | "right";
    textColor?: "white" | "black" | "primary" | "secondary";
  };
  callToActions?: Array<{
    label?: string;
    linkType?: "internal" | "external" | "category";
    internalLink?: string;
    externalUrl?: string;
    categoryReference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    style?: "primary" | "secondary" | "outline" | "ghost";
    openInNewTab?: boolean;
    _type: "ctaButton";
    _key: string;
  }>;
  status?: "draft" | "active" | "scheduled" | "inactive";
  priority?: number;
  scheduledStart?: string;
  scheduledEnd?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = BlockContent | SiteSettings | Page | Locale | Category | HeroBanner | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0]{    _id,    siteName,    homePage->{      _id,      title,      slug,      status    },    navigation[]->{      _id,      title,      slug,      status    },    footerNavigation[]->{      _id,      title,      slug,      status    }  }
export type SITE_SETTINGS_QUERYResult = {
  _id: string;
  siteName: string | null;
  homePage: {
    _id: string;
    title: string | null;
    slug: Slug | null;
    status: "draft" | "published" | null;
  } | null;
  navigation: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    status: "draft" | "published" | null;
  }> | null;
  footerNavigation: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    status: "draft" | "published" | null;
  }> | null;
} | null;
// Variable: SITE_NAME_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].siteName
export type SITE_NAME_QUERYResult = string | null;
// Variable: HOMEPAGE_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].homePage->{    _id,    title,    slug,    status,    excerpt,    seo{      title,      description,      noIndex    }  }
export type HOMEPAGE_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  status: "draft" | "published" | null;
  excerpt: string | null;
  seo: {
    title: string | null;
    description: string | null;
    noIndex: boolean | null;
  } | null;
} | null;
// Variable: SITE_NAVIGATION_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].navigation[]->{    _id,    title,    slug,    status,    excerpt  }
export type SITE_NAVIGATION_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  status: "draft" | "published" | null;
  excerpt: string | null;
}> | null;
// Variable: SITE_FOOTER_NAVIGATION_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].footerNavigation[]->{    _id,    title,    slug,    status,    excerpt  }
export type SITE_FOOTER_NAVIGATION_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  status: "draft" | "published" | null;
  excerpt: string | null;
}> | null;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"]{ _id, categoryId, slug, title }
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  categoryId: string | null;
  slug: Slug | null;
  title: string | null;
}>;
// Variable: CATEGORY_QUERY
// Query: *[    _type == "category"    && slug.current == $slug  ][0]{    _id,    categoryId,    slug,    title,    body,    publishedAt,    heroBanner->{      _id,      title,      slug,      landscapeImage{        asset->{          _id,          url        },        alt,        hotspot,        crop      },      portraitImage{        asset->{          _id,          url        },        alt,        hotspot,        crop      },      overlay{        headline,        subheadline,        content,        textPosition,        textColor      },      callToActions[]{        label,        linkType,        internalLink,        externalUrl,        categoryReference->{          _id,          slug,          title        },        style,        priority      }    }  }
export type CATEGORY_QUERYResult = {
  _id: string;
  categoryId: string | null;
  slug: Slug | null;
  title: string | null;
  body: BlockContent | null;
  publishedAt: string | null;
  heroBanner: {
    _id: string;
    title: string | null;
    slug: Slug | null;
    landscapeImage: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
    portraitImage: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
    overlay: {
      headline: string | null;
      subheadline: string | null;
      content: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "h2" | "h3" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
      textPosition: "center" | "left" | "right" | null;
      textColor: "black" | "primary" | "secondary" | "white" | null;
    } | null;
    callToActions: Array<{
      label: string | null;
      linkType: "category" | "external" | "internal" | null;
      internalLink: string | null;
      externalUrl: string | null;
      categoryReference: {
        _id: string;
        slug: Slug | null;
        title: string | null;
      } | null;
      style: "ghost" | "outline" | "primary" | "secondary" | null;
      priority: null;
    }> | null;
  } | null;
} | null;
// Variable: PAGE_QUERY
// Query: *[    _type == "page"    && slug.current == $slug  ][0]{    _id,    title,    slug,    status,    excerpt,    content,    seo{      title,      description,      noIndex    },    heroBanner[0]->{      _id,      title,      slug,      landscapeImage{        asset->{          _id,          url        },        alt,        hotspot,        crop      },      portraitImage{        asset->{          _id,          url        },        alt,        hotspot,        crop      },      overlay{        headline,        subheadline,        content,        textPosition,        textColor      },      callToActions[]{        label,        linkType,        internalLink,        externalUrl,        categoryReference->{          _id,          slug,          title        },        style,        priority      }    }  }
export type PAGE_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  status: "draft" | "published" | null;
  excerpt: string | null;
  content: BlockContent | null;
  seo: {
    title: string | null;
    description: string | null;
    noIndex: boolean | null;
  } | null;
  heroBanner: {
    _id: string;
    title: string | null;
    slug: Slug | null;
    landscapeImage: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
    portraitImage: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
    overlay: {
      headline: string | null;
      subheadline: string | null;
      content: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "h2" | "h3" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
      textPosition: "center" | "left" | "right" | null;
      textColor: "black" | "primary" | "secondary" | "white" | null;
    } | null;
    callToActions: Array<{
      label: string | null;
      linkType: "category" | "external" | "internal" | null;
      internalLink: string | null;
      externalUrl: string | null;
      categoryReference: {
        _id: string;
        slug: Slug | null;
        title: string | null;
      } | null;
      style: "ghost" | "outline" | "primary" | "secondary" | null;
      priority: null;
    }> | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0]{\n    _id,\n    siteName,\n    homePage->{\n      _id,\n      title,\n      slug,\n      status\n    },\n    navigation[]->{\n      _id,\n      title,\n      slug,\n      status\n    },\n    footerNavigation[]->{\n      _id,\n      title,\n      slug,\n      status\n    }\n  }": SITE_SETTINGS_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].siteName": SITE_NAME_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].homePage->{\n    _id,\n    title,\n    slug,\n    status,\n    excerpt,\n    seo{\n      title,\n      description,\n      noIndex\n    }\n  }": HOMEPAGE_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].navigation[]->{\n    _id,\n    title,\n    slug,\n    status,\n    excerpt\n  }": SITE_NAVIGATION_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].footerNavigation[]->{\n    _id,\n    title,\n    slug,\n    status,\n    excerpt\n  }": SITE_FOOTER_NAVIGATION_QUERYResult;
    "*[_type == \"category\"]{ _id, categoryId, slug, title }": CATEGORIES_QUERYResult;
    "*[\n    _type == \"category\"\n    && slug.current == $slug\n  ][0]{\n    _id,\n    categoryId,\n    slug,\n    title,\n    body,\n    publishedAt,\n    heroBanner->{\n      _id,\n      title,\n      slug,\n      landscapeImage{\n        asset->{\n          _id,\n          url\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      portraitImage{\n        asset->{\n          _id,\n          url\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      overlay{\n        headline,\n        subheadline,\n        content,\n        textPosition,\n        textColor\n      },\n      callToActions[]{\n        label,\n        linkType,\n        internalLink,\n        externalUrl,\n        categoryReference->{\n          _id,\n          slug,\n          title\n        },\n        style,\n        priority\n      }\n    }\n  }": CATEGORY_QUERYResult;
    "*[\n    _type == \"page\"\n    && slug.current == $slug\n  ][0]{\n    _id,\n    title,\n    slug,\n    status,\n    excerpt,\n    content,\n    seo{\n      title,\n      description,\n      noIndex\n    },\n    heroBanner[0]->{\n      _id,\n      title,\n      slug,\n      landscapeImage{\n        asset->{\n          _id,\n          url\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      portraitImage{\n        asset->{\n          _id,\n          url\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      overlay{\n        headline,\n        subheadline,\n        content,\n        textPosition,\n        textColor\n      },\n      callToActions[]{\n        label,\n        linkType,\n        internalLink,\n        externalUrl,\n        categoryReference->{\n          _id,\n          slug,\n          title\n        },\n        style,\n        priority\n      }\n    }\n  }": PAGE_QUERYResult;
  }
}

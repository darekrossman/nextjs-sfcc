/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type PageBuilder = Array<{
  _key: string;
} & Hero | {
  _key: string;
} & RichText | {
  _key: string;
} & SplitImage | {
  _key: string;
} & Features | {
  _key: string;
} & Faqs>;

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    size?: "small" | "medium" | "large" | "full";
    _type: "image";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    blank?: boolean;
    _type: "link";
    _key: string;
  } | {
    reference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    _type: "internalLink";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
  size?: "small" | "medium" | "large" | "full";
  _type: "image";
  _key: string;
}>;

export type SplitImage = {
  _type: "splitImage";
  orientation?: "imageLeft" | "imageRight";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type RichText = {
  _type: "richText";
  content?: BlockContent;
  alignment?: "left" | "center" | "right";
  maxWidth?: "full" | "large" | "medium" | "small";
};

export type Hero = {
  _type: "hero";
  title?: string;
  text?: BlockContent;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Features = {
  _type: "features";
  title?: string;
  features?: Array<{
    title?: string;
    text?: string;
    _type: "feature";
    _key: string;
  }>;
};

export type Faqs = {
  _type: "faqs";
  title?: string;
  faqs?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "faq";
  }>;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteName?: string;
  homePage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  navigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
  footerNavigation?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
};

export type Menu = {
  _id: string;
  _type: "menu";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  identifier?: Slug;
  menuItems?: Array<{
    label?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    externalUrl?: string;
    openInNewTab?: boolean;
    subItems?: Array<{
      label?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      externalUrl?: string;
      openInNewTab?: boolean;
      _type: "subMenuItem";
      _key: string;
    }>;
    _type: "menuItem";
    _key: string;
  }>;
  isActive?: boolean;
  sortOrder?: number;
};

export type Locale = {
  _id: string;
  _type: "locale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  tag?: string;
  fallback?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "locale";
  };
  default?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  categoryId?: string;
  slug?: Slug;
  bannerImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: Array<{
      _key: string;
    } & InternationalizedArrayStringValue>;
    _type: "image";
  };
  body?: BlockContent;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  content?: PageBuilder;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  metaDescription?: string;
  noIndex?: boolean;
  includeInSitemap?: boolean;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArrayString = Array<{
  _key: string;
} & InternationalizedArrayStringValue>;

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = PageBuilder | Faq | BlockContent | SplitImage | RichText | Hero | Features | Faqs | SiteSettings | Menu | Locale | Category | Page | InternationalizedArrayStringValue | InternationalizedArrayString | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0]{    _id,    siteName,    homePage->{      _id,      title,      slug,      status    },    navigation[]->{      _id,      title,      slug,      status    },    footerNavigation[]->{      _id,      title,      slug,      status    }  }
export type SITE_SETTINGS_QUERYResult = {
  _id: string;
  siteName: string | null;
  homePage: {
    _id: string;
    title: string | null;
    slug: Slug | null;
    status: null;
  } | null;
  navigation: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    status: null;
  }> | null;
  footerNavigation: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    status: null;
  }> | null;
} | null;
// Variable: SITE_NAME_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].siteName
export type SITE_NAME_QUERYResult = string | null;
// Variable: HOMEPAGE_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].homePage->{    _id,    title,    slug,    content[]{      _type,      _key,      _type == "hero" => {        title,        text,        image{          asset->{            _id,            url          },          hotspot,          crop        }      },      _type == "richText" => {        content,        alignment,        maxWidth      },      _type == "splitImage" => {        orientation,        title,        image{          asset->{            _id,            url          },          hotspot,          crop        }      },      _type == "features" => {        title,        features[]{          _key,          title,          text        }      },      _type == "faqs" => {        title,        faqs[]->{          _id,          title,          body        }      }    },    mainImage{      asset->{        _id,        url      },      hotspot,      crop    }  }
export type HOMEPAGE_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  content: Array<{
    _type: "faqs";
    _key: string;
    title: string | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          reference?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "category";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          _type: "internalLink";
          _key: string;
        } | {
          href?: string;
          blank?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        caption?: string;
        size?: "full" | "large" | "medium" | "small";
        _type: "image";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "features";
    _key: string;
    title: string | null;
    features: Array<{
      _key: string;
      title: string | null;
      text: string | null;
    }> | null;
  } | {
    _type: "hero";
    _key: string;
    title: string | null;
    text: BlockContent | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
  } | {
    _type: "richText";
    _key: string;
    content: BlockContent | null;
    alignment: "center" | "left" | "right" | null;
    maxWidth: "full" | "large" | "medium" | "small" | null;
  } | {
    _type: "splitImage";
    _key: string;
    orientation: "imageLeft" | "imageRight" | null;
    title: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
  }> | null;
  mainImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
} | null;
// Variable: SITE_NAVIGATION_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].navigation[]->{    _id,    title,    slug,    status,    excerpt  }
export type SITE_NAVIGATION_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  status: null;
  excerpt: string | null;
}> | null;
// Variable: SITE_FOOTER_NAVIGATION_QUERY
// Query: *[    _type == "siteSettings"    && _id == "siteSettings"  ][0].footerNavigation[]->{    _id,    title,    slug,    status,    excerpt  }
export type SITE_FOOTER_NAVIGATION_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  status: null;
  excerpt: string | null;
}> | null;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"]{     _id,     categoryId,     slug,     "title": coalesce(      title[_key == $locale][0].value,      title[_key == "en"][0].value,      title[0].value    )  }
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  categoryId: string | null;
  slug: Slug | null;
  title: string | null;
}>;
// Variable: CATEGORY_QUERY
// Query: *[    _type == "category"    && slug.current == $slug  ][0]{    _id,    categoryId,    slug,    "title": coalesce(      title[_key == $locale][0].value,      title[_key == "en"][0].value,      title[0].value    ),    body,    bannerImage{      asset->{        _id,        url      },      "alt": coalesce(        alt[_key == $locale][0].value,        alt[_key == "en"][0].value,        alt[0].value      ),      hotspot,      crop    }  }
export type CATEGORY_QUERYResult = {
  _id: string;
  categoryId: string | null;
  slug: Slug | null;
  title: string | null;
  body: BlockContent | null;
  bannerImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
} | null;
// Variable: PAGE_QUERY
// Query: *[    _type == "page"    && slug.current == $slug  ][0]{    _id,    title,    slug,    excerpt,    metaDescription,    noIndex,    includeInSitemap,    content[]{      _type,      _key,      _type == "hero" => {        title,        text,        image{          asset->{            _id,            url          },          hotspot,          crop        }      },      _type == "richText" => {        content,        alignment,        maxWidth      },      _type == "splitImage" => {        orientation,        title,        image{          asset->{            _id,            url          },          hotspot,          crop        }      },      _type == "features" => {        title,        features[]{          _key,          title,          text        }      },      _type == "faqs" => {        title,        faqs[]->{          _id,          title,          body        }      }    },    mainImage{      asset->{        _id,        url      },      hotspot,      crop    }  }
export type PAGE_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  metaDescription: string | null;
  noIndex: boolean | null;
  includeInSitemap: boolean | null;
  content: Array<{
    _type: "faqs";
    _key: string;
    title: string | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          reference?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "category";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          _type: "internalLink";
          _key: string;
        } | {
          href?: string;
          blank?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        caption?: string;
        size?: "full" | "large" | "medium" | "small";
        _type: "image";
        _key: string;
      }> | null;
    }> | null;
  } | {
    _type: "features";
    _key: string;
    title: string | null;
    features: Array<{
      _key: string;
      title: string | null;
      text: string | null;
    }> | null;
  } | {
    _type: "hero";
    _key: string;
    title: string | null;
    text: BlockContent | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
  } | {
    _type: "richText";
    _key: string;
    content: BlockContent | null;
    alignment: "center" | "left" | "right" | null;
    maxWidth: "full" | "large" | "medium" | "small" | null;
  } | {
    _type: "splitImage";
    _key: string;
    orientation: "imageLeft" | "imageRight" | null;
    title: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
  }> | null;
  mainImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
} | null;
// Variable: MENU_QUERY
// Query: *[    _type == "menu"    && identifier.current == $identifier    && isActive == true  ][0]{    _id,    title,    identifier,    isActive,    sortOrder,    menuItems[]{      _key,      label,      page->{        _id,        title,        slug      },      externalUrl,      openInNewTab,      subItems[]{        _key,        label,        page->{          _id,          title,          slug        },        externalUrl,        openInNewTab      }    }  }
export type MENU_QUERYResult = {
  _id: string;
  title: string | null;
  identifier: Slug | null;
  isActive: boolean | null;
  sortOrder: number | null;
  menuItems: Array<{
    _key: string;
    label: string | null;
    page: {
      _id: string;
      title: string | null;
      slug: Slug | null;
    } | null;
    externalUrl: string | null;
    openInNewTab: boolean | null;
    subItems: Array<{
      _key: string;
      label: string | null;
      page: {
        _id: string;
        title: string | null;
        slug: Slug | null;
      } | null;
      externalUrl: string | null;
      openInNewTab: boolean | null;
    }> | null;
  }> | null;
} | null;
// Variable: ALL_MENUS_QUERY
// Query: *[    _type == "menu"    && isActive == true  ] | order(sortOrder asc, title asc){    _id,    title,    identifier,    isActive,    sortOrder,    menuItems[]{      _key,      label,      page->{        _id,        title,        slug      },      externalUrl,      openInNewTab,      subItems[]{        _key,        label,        page->{          _id,          title,          slug        },        externalUrl,        openInNewTab      }    }  }
export type ALL_MENUS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  identifier: Slug | null;
  isActive: boolean | null;
  sortOrder: number | null;
  menuItems: Array<{
    _key: string;
    label: string | null;
    page: {
      _id: string;
      title: string | null;
      slug: Slug | null;
    } | null;
    externalUrl: string | null;
    openInNewTab: boolean | null;
    subItems: Array<{
      _key: string;
      label: string | null;
      page: {
        _id: string;
        title: string | null;
        slug: Slug | null;
      } | null;
      externalUrl: string | null;
      openInNewTab: boolean | null;
    }> | null;
  }> | null;
}>;
// Variable: MENU_ITEMS_QUERY
// Query: *[    _type == "menu"    && identifier.current == $identifier    && isActive == true  ][0].menuItems[]{    _key,    label,    page->{      _id,      title,      slug    },    externalUrl,    openInNewTab,    subItems[]{      _key,      label,      page->{        _id,        title,        slug      },      externalUrl,      openInNewTab    }  }
export type MENU_ITEMS_QUERYResult = Array<{
  _key: string;
  label: string | null;
  page: {
    _id: string;
    title: string | null;
    slug: Slug | null;
  } | null;
  externalUrl: string | null;
  openInNewTab: boolean | null;
  subItems: Array<{
    _key: string;
    label: string | null;
    page: {
      _id: string;
      title: string | null;
      slug: Slug | null;
    } | null;
    externalUrl: string | null;
    openInNewTab: boolean | null;
  }> | null;
}> | null;
// Variable: MENU_IDENTIFIERS_QUERY
// Query: *[    _type == "menu"    && isActive == true  ] | order(sortOrder asc, title asc){    _id,    title,    identifier,    "itemCount": count(menuItems)  }
export type MENU_IDENTIFIERS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  identifier: Slug | null;
  itemCount: number | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0]{\n    _id,\n    siteName,\n    homePage->{\n      _id,\n      title,\n      slug,\n      status\n    },\n    navigation[]->{\n      _id,\n      title,\n      slug,\n      status\n    },\n    footerNavigation[]->{\n      _id,\n      title,\n      slug,\n      status\n    }\n  }": SITE_SETTINGS_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].siteName": SITE_NAME_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].homePage->{\n    _id,\n    title,\n    slug,\n    content[]{\n      _type,\n      _key,\n      _type == \"hero\" => {\n        title,\n        text,\n        image{\n          asset->{\n            _id,\n            url\n          },\n          hotspot,\n          crop\n        }\n      },\n      _type == \"richText\" => {\n        content,\n        alignment,\n        maxWidth\n      },\n      _type == \"splitImage\" => {\n        orientation,\n        title,\n        image{\n          asset->{\n            _id,\n            url\n          },\n          hotspot,\n          crop\n        }\n      },\n      _type == \"features\" => {\n        title,\n        features[]{\n          _key,\n          title,\n          text\n        }\n      },\n      _type == \"faqs\" => {\n        title,\n        faqs[]->{\n          _id,\n          title,\n          body\n        }\n      }\n    },\n    mainImage{\n      asset->{\n        _id,\n        url\n      },\n      hotspot,\n      crop\n    }\n  }": HOMEPAGE_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].navigation[]->{\n    _id,\n    title,\n    slug,\n    status,\n    excerpt\n  }": SITE_NAVIGATION_QUERYResult;
    "*[\n    _type == \"siteSettings\"\n    && _id == \"siteSettings\"\n  ][0].footerNavigation[]->{\n    _id,\n    title,\n    slug,\n    status,\n    excerpt\n  }": SITE_FOOTER_NAVIGATION_QUERYResult;
    "*[_type == \"category\"]{ \n    _id, \n    categoryId, \n    slug, \n    \"title\": coalesce(\n      title[_key == $locale][0].value,\n      title[_key == \"en\"][0].value,\n      title[0].value\n    )\n  }": CATEGORIES_QUERYResult;
    "*[\n    _type == \"category\"\n    && slug.current == $slug\n  ][0]{\n    _id,\n    categoryId,\n    slug,\n    \"title\": coalesce(\n      title[_key == $locale][0].value,\n      title[_key == \"en\"][0].value,\n      title[0].value\n    ),\n    body,\n    bannerImage{\n      asset->{\n        _id,\n        url\n      },\n      \"alt\": coalesce(\n        alt[_key == $locale][0].value,\n        alt[_key == \"en\"][0].value,\n        alt[0].value\n      ),\n      hotspot,\n      crop\n    }\n  }": CATEGORY_QUERYResult;
    "*[\n    _type == \"page\"\n    && slug.current == $slug\n  ][0]{\n    _id,\n    title,\n    slug,\n    excerpt,\n    metaDescription,\n    noIndex,\n    includeInSitemap,\n    content[]{\n      _type,\n      _key,\n      _type == \"hero\" => {\n        title,\n        text,\n        image{\n          asset->{\n            _id,\n            url\n          },\n          hotspot,\n          crop\n        }\n      },\n      _type == \"richText\" => {\n        content,\n        alignment,\n        maxWidth\n      },\n      _type == \"splitImage\" => {\n        orientation,\n        title,\n        image{\n          asset->{\n            _id,\n            url\n          },\n          hotspot,\n          crop\n        }\n      },\n      _type == \"features\" => {\n        title,\n        features[]{\n          _key,\n          title,\n          text\n        }\n      },\n      _type == \"faqs\" => {\n        title,\n        faqs[]->{\n          _id,\n          title,\n          body\n        }\n      }\n    },\n    mainImage{\n      asset->{\n        _id,\n        url\n      },\n      hotspot,\n      crop\n    }\n  }": PAGE_QUERYResult;
    "*[\n    _type == \"menu\"\n    && identifier.current == $identifier\n    && isActive == true\n  ][0]{\n    _id,\n    title,\n    identifier,\n    isActive,\n    sortOrder,\n    menuItems[]{\n      _key,\n      label,\n      page->{\n        _id,\n        title,\n        slug\n      },\n      externalUrl,\n      openInNewTab,\n      subItems[]{\n        _key,\n        label,\n        page->{\n          _id,\n          title,\n          slug\n        },\n        externalUrl,\n        openInNewTab\n      }\n    }\n  }": MENU_QUERYResult;
    "*[\n    _type == \"menu\"\n    && isActive == true\n  ] | order(sortOrder asc, title asc){\n    _id,\n    title,\n    identifier,\n    isActive,\n    sortOrder,\n    menuItems[]{\n      _key,\n      label,\n      page->{\n        _id,\n        title,\n        slug\n      },\n      externalUrl,\n      openInNewTab,\n      subItems[]{\n        _key,\n        label,\n        page->{\n          _id,\n          title,\n          slug\n        },\n        externalUrl,\n        openInNewTab\n      }\n    }\n  }": ALL_MENUS_QUERYResult;
    "*[\n    _type == \"menu\"\n    && identifier.current == $identifier\n    && isActive == true\n  ][0].menuItems[]{\n    _key,\n    label,\n    page->{\n      _id,\n      title,\n      slug\n    },\n    externalUrl,\n    openInNewTab,\n    subItems[]{\n      _key,\n      label,\n      page->{\n        _id,\n        title,\n        slug\n      },\n      externalUrl,\n      openInNewTab\n    }\n  }": MENU_ITEMS_QUERYResult;
    "*[\n    _type == \"menu\"\n    && isActive == true\n  ] | order(sortOrder asc, title asc){\n    _id,\n    title,\n    identifier,\n    \"itemCount\": count(menuItems)\n  }": MENU_IDENTIFIERS_QUERYResult;
  }
}
